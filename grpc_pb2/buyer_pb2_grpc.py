# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_pb2.buyer_pb2 as buyer__pb2


class BuyStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAccount = channel.unary_unary(
                '/buy.Buy/CreateAccount',
                request_serializer=buyer__pb2.Buyer.SerializeToString,
                response_deserializer=buyer__pb2.UpdateResponse.FromString,
                )
        self.GetUserID = channel.unary_unary(
                '/buy.Buy/GetUserID',
                request_serializer=buyer__pb2.Login.SerializeToString,
                response_deserializer=buyer__pb2.UpdateResponse.FromString,
                )
        self.GetSellerRating = channel.unary_unary(
                '/buy.Buy/GetSellerRating',
                request_serializer=buyer__pb2.SellerId.SerializeToString,
                response_deserializer=buyer__pb2.SellerRating.FromString,
                )
        self.GetAvailableItems = channel.unary_unary(
                '/buy.Buy/GetAvailableItems',
                request_serializer=buyer__pb2.Search.SerializeToString,
                response_deserializer=buyer__pb2.Items.FromString,
                )
        self.AddItems = channel.unary_unary(
                '/buy.Buy/AddItems',
                request_serializer=buyer__pb2.Cart.SerializeToString,
                response_deserializer=buyer__pb2.UpdateResponse.FromString,
                )
        self.RemoveItems = channel.unary_unary(
                '/buy.Buy/RemoveItems',
                request_serializer=buyer__pb2.Cart.SerializeToString,
                response_deserializer=buyer__pb2.UpdateResponse.FromString,
                )
        self.GetCart = channel.unary_unary(
                '/buy.Buy/GetCart',
                request_serializer=buyer__pb2.UserID.SerializeToString,
                response_deserializer=buyer__pb2.Cart.FromString,
                )
        self.DeleteCart = channel.unary_unary(
                '/buy.Buy/DeleteCart',
                request_serializer=buyer__pb2.UserID.SerializeToString,
                response_deserializer=buyer__pb2.UpdateResponse.FromString,
                )
        self.SaveCart = channel.unary_unary(
                '/buy.Buy/SaveCart',
                request_serializer=buyer__pb2.Cart.SerializeToString,
                response_deserializer=buyer__pb2.UpdateResponse.FromString,
                )
        self.ProvideFeedback = channel.unary_unary(
                '/buy.Buy/ProvideFeedback',
                request_serializer=buyer__pb2.Feedbacks.SerializeToString,
                response_deserializer=buyer__pb2.UpdateResponse.FromString,
                )
        self.MakePurchaseCart = channel.unary_unary(
                '/buy.Buy/MakePurchaseCart',
                request_serializer=buyer__pb2.PurchaseCart.SerializeToString,
                response_deserializer=buyer__pb2.UpdateResponse.FromString,
                )
        self.MakePurchaseDB = channel.unary_unary(
                '/buy.Buy/MakePurchaseDB',
                request_serializer=buyer__pb2.PurchaseDB.SerializeToString,
                response_deserializer=buyer__pb2.UpdateResponse.FromString,
                )
        self.GetHistory = channel.unary_unary(
                '/buy.Buy/GetHistory',
                request_serializer=buyer__pb2.UserID.SerializeToString,
                response_deserializer=buyer__pb2.History.FromString,
                )


class BuyServicer(object):
    """The greeting service definition.
    """

    def CreateAccount(self, request, context):
        """Unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSellerRating(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProvideFeedback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakePurchaseCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakePurchaseDB(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BuyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=buyer__pb2.Buyer.FromString,
                    response_serializer=buyer__pb2.UpdateResponse.SerializeToString,
            ),
            'GetUserID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserID,
                    request_deserializer=buyer__pb2.Login.FromString,
                    response_serializer=buyer__pb2.UpdateResponse.SerializeToString,
            ),
            'GetSellerRating': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSellerRating,
                    request_deserializer=buyer__pb2.SellerId.FromString,
                    response_serializer=buyer__pb2.SellerRating.SerializeToString,
            ),
            'GetAvailableItems': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableItems,
                    request_deserializer=buyer__pb2.Search.FromString,
                    response_serializer=buyer__pb2.Items.SerializeToString,
            ),
            'AddItems': grpc.unary_unary_rpc_method_handler(
                    servicer.AddItems,
                    request_deserializer=buyer__pb2.Cart.FromString,
                    response_serializer=buyer__pb2.UpdateResponse.SerializeToString,
            ),
            'RemoveItems': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveItems,
                    request_deserializer=buyer__pb2.Cart.FromString,
                    response_serializer=buyer__pb2.UpdateResponse.SerializeToString,
            ),
            'GetCart': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCart,
                    request_deserializer=buyer__pb2.UserID.FromString,
                    response_serializer=buyer__pb2.Cart.SerializeToString,
            ),
            'DeleteCart': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCart,
                    request_deserializer=buyer__pb2.UserID.FromString,
                    response_serializer=buyer__pb2.UpdateResponse.SerializeToString,
            ),
            'SaveCart': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveCart,
                    request_deserializer=buyer__pb2.Cart.FromString,
                    response_serializer=buyer__pb2.UpdateResponse.SerializeToString,
            ),
            'ProvideFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.ProvideFeedback,
                    request_deserializer=buyer__pb2.Feedbacks.FromString,
                    response_serializer=buyer__pb2.UpdateResponse.SerializeToString,
            ),
            'MakePurchaseCart': grpc.unary_unary_rpc_method_handler(
                    servicer.MakePurchaseCart,
                    request_deserializer=buyer__pb2.PurchaseCart.FromString,
                    response_serializer=buyer__pb2.UpdateResponse.SerializeToString,
            ),
            'MakePurchaseDB': grpc.unary_unary_rpc_method_handler(
                    servicer.MakePurchaseDB,
                    request_deserializer=buyer__pb2.PurchaseDB.FromString,
                    response_serializer=buyer__pb2.UpdateResponse.SerializeToString,
            ),
            'GetHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistory,
                    request_deserializer=buyer__pb2.UserID.FromString,
                    response_serializer=buyer__pb2.History.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'buy.Buy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Buy(object):
    """The greeting service definition.
    """

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/CreateAccount',
            buyer__pb2.Buyer.SerializeToString,
            buyer__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/GetUserID',
            buyer__pb2.Login.SerializeToString,
            buyer__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSellerRating(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/GetSellerRating',
            buyer__pb2.SellerId.SerializeToString,
            buyer__pb2.SellerRating.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/GetAvailableItems',
            buyer__pb2.Search.SerializeToString,
            buyer__pb2.Items.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/AddItems',
            buyer__pb2.Cart.SerializeToString,
            buyer__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/RemoveItems',
            buyer__pb2.Cart.SerializeToString,
            buyer__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/GetCart',
            buyer__pb2.UserID.SerializeToString,
            buyer__pb2.Cart.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/DeleteCart',
            buyer__pb2.UserID.SerializeToString,
            buyer__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/SaveCart',
            buyer__pb2.Cart.SerializeToString,
            buyer__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProvideFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/ProvideFeedback',
            buyer__pb2.Feedbacks.SerializeToString,
            buyer__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakePurchaseCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/MakePurchaseCart',
            buyer__pb2.PurchaseCart.SerializeToString,
            buyer__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakePurchaseDB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/MakePurchaseDB',
            buyer__pb2.PurchaseDB.SerializeToString,
            buyer__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buy.Buy/GetHistory',
            buyer__pb2.UserID.SerializeToString,
            buyer__pb2.History.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
